/**
 * 自定义插件开发示例
 */

import {
  definePlugin,
  Generator,
  logger,
  type Plugin,
  type PluginContext,
  type GenerateResult
} from '../src'

// ===== 示例 1: 简单的日志插件 =====
const loggingPlugin: Plugin = definePlugin({
  name: 'logging-plugin',
  version: '1.0.0',
  description: '记录所有生成操作的插件',

  hooks: {
    beforeGenerate: async (context: PluginContext) => {
      logger.info(`即将生成: ${context.templateName}`)
    },

    afterGenerate: async (context: PluginContext, result: GenerateResult) => {
      if (result.success) {
        logger.info(`生成成功: ${result.outputPath}`)
      }
    },

    onError: async (context: PluginContext, error: Error) => {
      logger.error(`生成失败: ${context.templateName}`, error)
    }
  }
})

// ===== 示例 2: 代码注入插件 =====
const codeInjectionPlugin: Plugin = definePlugin({
  name: 'code-injection-plugin',
  version: '1.0.0',
  description: '在生成的代码中注入自定义内容',
  config: {
    header: '// Auto-generated by LDesign Generator',
    footer: '// End of generated code'
  },

  hooks: {
    onTemplateRender: async (context: PluginContext, content: string) => {
      const header = context.config?.header || '// Auto-generated'
      const footer = context.config?.footer || ''

      return `${header}\n\n${content}\n\n${footer}`
    }
  }
})

// ===== 示例 3: 版权信息插件 =====
const copyrightPlugin: Plugin = definePlugin({
  name: 'copyright-plugin',
  version: '1.0.0',
  description: '添加版权信息',
  config: {
    author: 'LDesign Team',
    license: 'MIT',
    year: new Date().getFullYear()
  },

  hooks: {
    onTemplateRender: async (context: PluginContext, content: string) => {
      const { author, license, year } = context.config || {}

      const copyright = `/**
 * Copyright (c) ${year} ${author}
 * Licensed under ${license}
 * 
 * Generated by: @ldesign/generator
 * Template: ${context.templateName}
 * Date: ${new Date().toISOString()}
 */

`

      return copyright + content
    }
  }
})

// ===== 示例 4: 文件大小检查插件 =====
const fileSizeCheckPlugin: Plugin = definePlugin({
  name: 'file-size-check-plugin',
  version: '1.0.0',
  description: '检查生成文件的大小',
  config: {
    maxSize: 1024 * 100 // 100KB
  },

  hooks: {
    afterGenerate: async (context: PluginContext, result: GenerateResult) => {
      if (!result.success || !result.outputPath) return

      const fs = await import('fs-extra')
      const stats = await fs.stat(result.outputPath)
      const maxSize = context.config?.maxSize || 102400

      if (stats.size > maxSize) {
        logger.warn(`文件过大: ${result.outputPath} (${stats.size} bytes)`, {
          maxSize,
          actualSize: stats.size
        })
      }
    }
  }
})

// ===== 示例 5: Git 自动提交插件 =====
const gitAutoCommitPlugin: Plugin = definePlugin({
  name: 'git-auto-commit-plugin',
  version: '1.0.0',
  description: '自动提交生成的文件到 Git',
  config: {
    enabled: false, // 默认禁用
    commitMessage: 'chore: generate code via @ldesign/generator'
  },

  hooks: {
    afterGenerate: async (context: PluginContext, result: GenerateResult) => {
      if (!context.config?.enabled) return
      if (!result.success || !result.outputPath) return

      const { exec } = await import('child_process')
      const { promisify } = await import('util')
      const execAsync = promisify(exec)

      try {
        // 添加文件
        await execAsync(`git add ${result.outputPath}`)

        // 提交
        const message = context.config?.commitMessage || 'chore: generate code'
        await execAsync(`git commit -m "${message}"`)

        logger.info(`文件已自动提交到 Git: ${result.outputPath}`)
      } catch (error) {
        logger.warn('Git 自动提交失败', { error: (error as Error).message })
      }
    }
  }
})

// ===== 使用自定义插件 =====
async function demo() {
  console.log('🎨 自定义插件示例\n')

  const generator = new Generator({
    templateDir: './templates',
    outputDir: './output/custom',
    plugins: [
      loggingPlugin,
      codeInjectionPlugin,
      copyrightPlugin,
      fileSizeCheckPlugin
      // gitAutoCommitPlugin // 需要时启用
    ]
  })

  // 生成文件
  const result = await generator.generate('vue/component.ejs', {
    componentName: 'CustomComponent',
    outputFileName: 'CustomComponent.vue'
  })

  console.log(`\n✓ 生成完成: ${result.outputPath}`)
  console.log('\n📊 插件统计:')

  const pluginManager = generator.getPluginManager()
  const stats = pluginManager.getStats()

  console.log(`  总插件数: ${stats.total}`)
  console.log(`  已加载: ${stats.loaded}`)
  stats.plugins.forEach(p => {
    console.log(`  - ${p.name} (${p.loaded ? '已加载' : '未加载'})`)
  })
}

// ===== 导出插件供其他项目使用 =====
export {
  loggingPlugin,
  codeInjectionPlugin,
  copyrightPlugin,
  fileSizeCheckPlugin,
  gitAutoCommitPlugin
}

// 运行演示
if (require.main === module) {
  demo().catch(console.error)
}

