/**
* <%= name %> 工具函数<% if (description) { %> - <%= description %>
      <% } %>
        */

        /**
        * 格式化数据
        */
        export function format<%= pascalCase(name) %>(data<% if (lang==='ts' ) { %>: any<% } %>)<% if (lang==='ts' ) {
                %>: any<% } %> {
                  // TODO: 实现格式化逻辑
                  return data
                  }

                  /**
                  * 验证数据
                  */
                  export function validate<%= pascalCase(name) %>(data<% if (lang==='ts' ) { %>: any<% } %>)<% if
                          (lang==='ts' ) { %>: boolean<% } %> {
                            // TODO: 实现验证逻辑
                            return true
                            }

                            /**
                            * 转换数据
                            */
                            export function transform<%= pascalCase(name) %>(data<% if (lang==='ts' ) { %>: any<% } %>)
                                  <% if (lang==='ts' ) { %>: any<% } %> {
                                      // TODO: 实现转换逻辑
                                      return data
                                      }

                                      /**
                                      * 深拷贝
                                      */
                                      export function deepClone<T>(obj: T): T {
                                        return JSON.parse(JSON.stringify(obj))
                                        }

                                        /**
                                        * 防抖函数
                                        */
                                        export function debounce<T extends (...args: any[])=> any>(
                                          func: T,
                                          wait: number = 300
                                          ): (...args: Parameters<T>) => void {
                                            let timeout: NodeJS.Timeout | null = null

                                            return function (this: any, ...args: Parameters<T>) {
                                              const context = this

                                              if (timeout) {
                                              clearTimeout(timeout)
                                              }

                                              timeout = setTimeout(() => {
                                              func.apply(context, args)
                                              }, wait)
                                              }
                                              }

                                              /**
                                              * 节流函数
                                              */
                                              export function throttle<T extends (...args: any[])=> any>(
                                                func: T,
                                                wait: number = 300
                                                ): (...args: Parameters<T>) => void {
                                                  let lastTime = 0

                                                  return function (this: any, ...args: Parameters<T>) {
                                                    const context = this
                                                    const now = Date.now()

                                                    if (now - lastTime >= wait) {
                                                    lastTime = now
                                                    func.apply(context, args)
                                                    }
                                                    }
                                                    }

                                                    /**
                                                    * 延迟函数
                                                    */
                                                    export function delay(ms: number): Promise<void> {
                                                      return new Promise(resolve => setTimeout(resolve, ms))
                                                      }

                                                      /**
                                                      * 生成唯一 ID
                                                      */
                                                      export function generateId(prefix: string = 'id'): string {
                                                      return
                                                      `${prefix}-${Date.now()}-${Math.random().toString(36).substr(2,
                                                      9)}`
                                                      }

                                                      /**
                                                      * 格式化日期
                                                      */
                                                      export function formatDate(date: Date | string | number, format:
                                                      string = 'YYYY-MM-DD'): string {
                                                      const d = new Date(date)
                                                      const year = d.getFullYear()
                                                      const month = String(d.getMonth() + 1).padStart(2, '0')
                                                      const day = String(d.getDate()).padStart(2, '0')
                                                      const hour = String(d.getHours()).padStart(2, '0')
                                                      const minute = String(d.getMinutes()).padStart(2, '0')
                                                      const second = String(d.getSeconds()).padStart(2, '0')

                                                      return format
                                                      .replace('YYYY', String(year))
                                                      .replace('MM', month)
                                                      .replace('DD', day)
                                                      .replace('HH', hour)
                                                      .replace('mm', minute)
                                                      .replace('ss', second)
                                                      }

                                                      /**
                                                      * 数组去重
                                                      */
                                                      export function unique<T>(arr: T[], key?: keyof T): T[] {
                                                        if (!key) {
                                                        return Array.from(new Set(arr))
                                                        }

                                                        const seen = new Set()
                                                        return arr.filter(item => {
                                                        const value = item[key]
                                                        if (seen.has(value)) {
                                                        return false
                                                        }
                                                        seen.add(value)
                                                        return true
                                                        })
                                                        }

                                                        /**
                                                        * 对象合并
                                                        */
                                                        export function merge<T extends object>(...objects: Partial<T>
                                                            []): T {
                                                            return Object.assign({}, ...objects) as T
                                                            }

                                                            export default {
                                                            format<%= pascalCase(name) %>,
                                                              validate<%= pascalCase(name) %>,
                                                                transform<%= pascalCase(name) %>,
                                                                  deepClone,
                                                                  debounce,
                                                                  throttle,
                                                                  delay,
                                                                  generateId,
                                                                  formatDate,
                                                                  unique,
                                                                  merge
                                                                  }
