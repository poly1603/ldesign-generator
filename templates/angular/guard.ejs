import { Injectable } from '@angular/core'
import {
CanActivate,
ActivatedRouteSnapshot,
RouterStateSnapshot,
Router,
UrlTree
} from '@angular/router'
import { Observable } from 'rxjs'
<% if (withAuth) { %>import { AuthService } from '@/services/auth.service'<% } %>

    /**
    * <%= pascalCase(name) %>Guard<% if (description) { %> - <%= description %>
          <% } %>
            */
            @Injectable({
            providedIn: 'root'
            })
            export class <%= pascalCase(name) %>Guard implements CanActivate {
              constructor(
              private router: Router<% if (withAuth) { %>,
                private authService: AuthService<% } %>
                  ) { }

                  canActivate(
                  route: ActivatedRouteSnapshot,
                  state: RouterStateSnapshot
                  ): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {
                      // TODO: 实现路由守卫逻辑

                      <% if (withAuth) { %>
                        // 示例: 检查用户是否已登录
                        if (this.authService.isAuthenticated()) {
                        return true
                        }

                        // 重定向到登录页
                        return this.router.createUrlTree(['/login'], {
                        queryParams: { returnUrl: state.url }
                        })
                        <% } else { %>
                          // 示例: 简单的权限检查
                          const hasPermission = this.checkPermission(route)

                          if (hasPermission) {
                          return true
                          }

                          // 重定向到无权限页面
                          return this.router.createUrlTree(['/unauthorized'])
                          <% } %>
                            }

                            private checkPermission(route: ActivatedRouteSnapshot): boolean {
                            // TODO: 实现权限检查逻辑
                            const requiredRoles = route.data['roles'] as string[] | undefined

                            if (!requiredRoles || requiredRoles.length === 0) {
                            return true
                            }

                            // TODO: 检查用户角色
                            // const userRoles = this.authService.getUserRoles()
                            // return requiredRoles.some(role => userRoles.includes(role))

                            return true
                            }
                            }